generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


// + ---------- USER ---------- + //
model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique
  name  String
  password String

  roles UsersOnRoles[]
  rating Rating[]
  favorite Favorite?
  cart Cart?
}



// + ---------- ROLE ---------- + //
model Role {
  id    Int     @default(autoincrement()) @id
  title String  @unique
  description String

  users UsersOnRoles[]
}

// + ---------- USERS_ON_ROLES ---------- + //
model UsersOnRoles {
  user User @relation(fields: [userId], references: [id])
  userId Int 

  role Role @relation(fields: [roleId], references: [id])
  roleId Int

  @@id([userId, roleId])
}



// + ---------- FAVORITES ---------- + //
model Favorite {
  id Int @default(autoincrement()) @id
  
  products FavoritesProduct[]

  user User @relation(fields: [userId], references: [id])
  userId Int @unique
}

// + ---------- FAVORITES_PRODUCT ---------- + //
model FavoritesProduct {
  favorite Favorite @relation(fields: [favoriteId], references: [id])
  favoriteId Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@id([favoriteId, productId])
}



// + ---------- CART ---------- + //
model Cart {
  id Int @default(autoincrement()) @id
  
  products CartProduct[]

  user User @relation(fields: [userId], references: [id])
  userId Int @unique
}



// + ---------- CART_PRODUCT ---------- + //
model CartProduct {
  cart Cart @relation(fields: [cartId], references: [id])
  cartId Int

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  @@id([cartId, productId])
}




// + ---------- PRODUCT ---------- + //
model Product {
  id Int @default(autoincrement()) @id
  title String
  description String
  price String


  favorites FavoritesProduct[]
  carts CartProduct[]
  photos Photos[]
  rating Rating[]
  count Count?

  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
}



// + ---------- PHOTOS ---------- + //
model Photos {
  id Int @default(autoincrement()) @id
  photo String

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
}



// + ---------- CATEGORY ---------- + //
model Category {
  id Int @default(autoincrement()) @id
  
  title String
  fullTitle String

  products Product[]
}



// + ---------- COUNT ---------- + //
model Count {
  id Int @default(autoincrement()) @id
  count Int @default(1)

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int @unique
}



// + ---------- RATING ---------- + //
model Rating {
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  user User @relation(fields: [userId], references: [id])
  userId Int

  count Int

  @@id([userId, productId])
}